- Tener colas creadas en el Device y evitar mandar queues a algunos objetos como buffers, texturas o commandbuffers (usando directamente las colas instanciadas en el device).
- Pasar valgrind
- Add https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator.git
- Add glslang or shaderc
- Blending demo
	var viewport = new Array(Corners.MAX);
	viewport[Corners.BOTTOM_LEFT] = {
	    x: 0,
	    y: 0,
	    z: windowSize.x / 2,
	    w: windowSize.y / 2
	};
	viewport[Corners.BOTTOM_RIGHT] = {
	    x: windowSize.x / 2,
	    y: 0,
	    z: windowSize.x / 2,
	    w: windowSize.y / 2
	};
	viewport[Corners.TOP_RIGHT] = {
	    x: windowSize.x / 2,
	    y: windowSize.y / 2,
	    z: windowSize.x / 2,
	    w: windowSize.y / 2
	};
	viewport[Corners.TOP_LEFT] = {
	    x: 0,
	    y: windowSize.y / 2,
	    z: windowSize.x / 2,
	    w: windowSize.y / 2
	};
	// Render
	gl.clearColor(0.5, 0.0, 0.0, 1.0);
	gl.enable(gl.BLEND);
            
    for (var i = 0; i < Corners.MAX; ++i) {
	    gl.viewport(viewport[i].x, viewport[i].y, viewport[i].z, viewport[i].w);
	    
	    if(i == Corners.TOP_LEFT)
	    {
	        //pass
	    }
	    else if(i == Corners.TOP_RIGHT)
	    {
	        gl.drawArrays(gl.TRIANGLES, 0, 6);
	    }
	    else if(i == Corners.BOTTOM_RIGHT)
	    {
	        gl.blendEquation(gl.MIN);
	        gl.drawArrays(gl.TRIANGLES, 0, 6);
	        
	    }
	    else if(i == Corners.BOTTOM_LEFT)
	    {
	        gl.blendEquation(gl.MAX);
	        gl.drawArrays(gl.TRIANGLES, 0, 6);
	    }
	}

- struct alignas(16) PushConstants
    {
        glm::vec4 fillColor;
        float normalLength;
    };
- Usar std::move en shared_ptr